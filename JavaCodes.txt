Path: com.company.techradar.domain.model.Category.java


package com.company.techradar.domain.model;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Builder
public class Category {
    private String id;
    private String name;
    private String description;
    private String radarQuadrant;
    private String createdBy;
    private String updatedBy;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}

--------------------------

Path: com.company.techradar.adapter.out.mongodb.entity.CategoryMongoEntity.java


package com.company.techradar.adapter.out.mongodb.entity;

import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;

@Data
@Document(collection = "categories")
public class CategoryMongoEntity {

    @Id
    private String id;
    private String name;
    private String description;
    private String radarQuadrant;
    private String createdBy;
    private String updatedBy;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}


------------------------

Path: com.company.techradar.adapter.out.mongodb.repository.SpringDataCategoryRepository.java


package com.company.techradar.adapter.out.mongodb.repository;

import com.company.techra
dar.adapter.out.mongodb.entity.CategoryMongoEntity;
import org.springframework.data.mongodb.repository.MongoRepository;

public interface SpringDataCategoryRepository extends MongoRepository<CategoryMongoEntity, String> {
}

----------------------

Path: com.company.techradar.adapter.out.mongodb.mapper.CategoryMapper.java


package com.company.techradar.adapter.out.mongodb.mapper;

import com.company.techradar.domain.model.Category;
import com.company.techradar.adapter.out.mongodb.entity.CategoryMongoEntity;
import org.springframework.stereotype.Component;

@Component
public class CategoryMapper {

    public Category toDomain(CategoryMongoEntity entity) {
        return Category.builder()
                .id(entity.getId())
                .name(entity.getName())
                .description(entity.getDescription())
                .radarQuadrant(entity.getRadarQuadrant())
                .createdBy(entity.getCreatedBy())
                .updatedBy(entity.getUpdatedBy())
                .createdAt(entity.getCreatedAt())
                .updatedAt(entity.getUpdatedAt())
                .build();
    }

    public CategoryMongoEntity toEntity(Category domain) {
        CategoryMongoEntity entity = new CategoryMongoEntity();
        entity.setId(domain.getId());
        entity.setName(domain.getName());
        entity.setDescription(domain.getDescription());
        entity.setRadarQuadrant(domain.getRadarQuadrant());
        entity.setCreatedBy(domain.getCreatedBy());
        entity.setUpdatedBy(domain.getUpdatedBy());
        entity.setCreatedAt(domain.getCreatedAt());
        entity.setUpdatedAt(domain.getUpdatedAt());
        return entity;
    }
}


-----------------------

Path: com.company.techradar.application.port.out.CategoryRepository.java


package com.company.techradar.application.port.out;

import com.company.techradar.domain.model.Category;

import java.util.List;

public interface CategoryRepository {
    List<Category> findAll();
}

-----------------------------------------

Path: com.company.techradar.adapter.out.mongodb.CategoryMongoAdapter.java


package com.company.techradar.adapter.out.mongodb;

import com.company.techradar.application.port.out.CategoryRepository;
import com.company.techradar.domain.model.Category;
import com.company.techradar.adapter.out.mongodb.repository.SpringDataCategoryRepository;
import com.company.techradar.adapter.out.mongodb.mapper.CategoryMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
@RequiredArgsConstructor
public class CategoryMongoAdapter implements CategoryRepository {

    private final SpringDataCategoryRepository repository;
    private final CategoryMapper mapper;

    @Override
    public List<Category> findAll() {
        return repository.findAll().stream()
                .map(mapper::toDomain)
                .collect(Collectors.toList());
    }
}


---------------------------------------

Path: com.company.techradar.application.service.CategoryService.java


package com.company.techradar.application.service;

import com.company.techradar.application.port.out.CategoryRepository;
import com.company.techradar.domain.model.Category;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CategoryService {

    private final CategoryRepository repository;

    public List<Category> getAllCategories() {
        return repository.findAll();
    }
}

---------------------------------

Path: com.company.techradar.adapter.in.rest.CategoryController.java

package com.company.techradar.adapter.in.rest;

import com.company.techradar.application.service.CategoryService;
import com.company.techradar.domain.model.Category;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@RequiredArgsConstructor
public class CategoryController {

    private final CategoryService categoryService;

    @GetMapping
    public List<Category> getAllCategories() {
        try {
            return categoryService.getAllCategories();
        } catch (RuntimeException ex) {
            throw new RuntimeException("Error fetching categories");
        }
    }
}


--------------------


